DROP DATABASE IF EXISTS Restaurant;
CREATE DATABASE Restaurant;
USE Restaurant;

DROP TABLE IF EXISTS EMPLOYEE;
CREATE TABLE EMPLOYEE (
eid INT NOT NULL AUTO_INCREMENT,
firstName VARCHAR(25) NOT NULL,
lastName VARCHAR(25) NOT NULL,
position VARCHAR(25) NOT NULL,
clockedIn BOOLEAN NOT NULL,
PRIMARY KEY (eid));


DROP TABLE IF EXISTS CUSTOMER ;
CREATE TABLE CUSTOMER (
cid INT NOT NULL AUTO_INCREMENT,
firstName VARCHAR(25) NOT NULL,
lastName VARCHAR(25) NOT NULL,
PRIMARY KEY (cid) );


DROP TABLE IF EXISTS aTABLE ;
CREATE TABLE aTABLE (
tID INT NOT NULL AUTO_INCREMENT,
eID INT NOT NULL,
seats INT NOT NULL,
availability BOOLEAN NOT NULL,
PRIMARY KEY (tID) );

DROP TABLE IF EXISTS MENU;
CREATE TABLE MENU (
mID INT NOT NULL AUTO_INCREMENT,
itemName VARCHAR(25) UNIQUE NOT NULL,
description VARCHAR(100) NOT NULL,
price DECIMAL(10,2) NOT NULL,
type VARCHAR(15) NOT NULL,
quantityAvaiable INT NOT NULL,
PRIMARY KEY (mid) );

DROP TABLE IF EXISTS RATING;
CREATE TABLE RATING (
cID INT NOT NULL,
stars INT,
feedback VARCHAR(140),
PRIMARY KEY (cID),
FOREIGN KEY (cID) REFERENCES CUSTOMER(cID));

DROP TABLE IF EXISTS RECEIPT ;
CREATE TABLE RECEIPT (
rID INT NOT NULL AUTO_INCREMENT,
sID INT NOT NULL ,
cID INT NOT NULL,
subtotal DECIMAL(10,2) NOT NULL,
gratuity DECIMAL(10,2) NOT NULL,
date DATE NOT NULL,
PRIMARY KEY (rID) ,
FOREIGN KEY ( sID) REFERENCES EMPLOYEE(eID),
FOREIGN KEY (cID) REFERENCES CUSTOMER(cID),
UNIQUE (cID, date)
);

DROP TABLE IF EXISTS RESERVATION;
CREATE TABLE RESERVATION (
tID INT NOT NULL,
cID INT NOT NULL,
partySize INT NOT NULL,
date DATE NOT NULL,
FOREIGN KEY (tID) REFERENCES aTABLE(tID), 
FOREIGN KEY (cID) REFERENCES CUSTOMER(cID)
);

/*
/* Give discount to customers who give 5 star ratings */
CREATE TRIGGER highRater
AFTER INSERT ON Rating
FOR EACH ROW
UPDATE Customer
	SET discount=10
	WHERE cID=new.cID

/* Apply discount to receipt */
CREATE TRIGGER discount
BEFORE INSERT ON Receipt
FOR EACH ROW
WHEN new.cID IN (
	SELECT cID
	FROM Customer
	WHERE discount>0)
SET new.subtotal=new.subtotal*(100-(
	SELECT discount
	FROM Customer
	WHERE cID=new.cID;))/100;

/* Update customer lastVisit when reservation is made */
CREATE TRIGGER visiting
AFTER INSERT ON Reservation
FOR EACH ROW
UPDATE Customer
	SET updatedAt=Date(now)
	WHERE new.cID=cID;
*/